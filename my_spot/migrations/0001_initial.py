# Generated by Django 2.2.9 on 2020-01-25 13:48

import colorfield.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import fontawesome.fields
import geoposition.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('base', '0008_projet_position'),
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Spot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('slug', models.SlugField(null=True, unique=True)),
                ('description', models.TextField(blank=True)),
                ('position', geoposition.fields.GeopositionField(max_length=42)),
                ('visibilite', models.PositiveSmallIntegerField(choices=[(1, 'Public'), (2, 'Privé'), (3, 'Caché')], default=3, help_text='Visbilité du spot : Public = visible par tous ; Privé = visible par les membre du groupe ; Caché = seul le possésseur peut le voir.', verbose_name='visibilité')),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='date de création')),
                ('date_modification', models.DateTimeField(auto_now=True, verbose_name='dernière modification')),
                ('explorateur', models.ForeignKey(blank=True, help_text='Personne ayant exploré le spot', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='spots', to='base.Profil')),
                ('groupes', models.ManyToManyField(blank=True, related_name='spots', to='auth.Group', verbose_name='partagé aux groupes')),
            ],
            options={
                'ordering': ('-date_creation',),
            },
        ),
        migrations.CreateModel(
            name='SpotTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('slug', models.SlugField(null=True, unique=True)),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='date de création')),
                ('icone', fontawesome.fields.IconField(blank=True, max_length=60, verbose_name='icône')),
                ('color', colorfield.fields.ColorField(default='#FFFFFF', max_length=18, verbose_name='couleur')),
            ],
            options={
                'ordering': ('nom',),
            },
        ),
        migrations.CreateModel(
            name='SpotPhoto',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=240)),
                ('photo', models.TextField(verbose_name='url photo')),
                ('date_ajout', models.DateTimeField(auto_now_add=True, verbose_name="date d'ajout")),
                ('photographe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='spot_photos', to='base.Profil')),
                ('spot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='my_spot.Spot')),
            ],
            options={
                'ordering': ('date_ajout',),
            },
        ),
        migrations.CreateModel(
            name='SpotNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.PositiveSmallIntegerField(default=5, help_text='Une note entre 0 et 10', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('justification', models.TextField(blank=True)),
                ('date_ajout', models.DateTimeField(auto_now_add=True, verbose_name="date d'ajout")),
                ('auteur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='spot_notes', to='base.Profil')),
                ('spot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='my_spot.Spot')),
            ],
            options={
                'ordering': ('-date_ajout',),
            },
        ),
        migrations.AddField(
            model_name='spot',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='spots', to='my_spot.SpotTag'),
        ),
    ]
